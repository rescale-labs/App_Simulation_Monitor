#!/bin/bash

JOB_USER=$1
MPI_ROLE=$2

MOUNT_POINT="%MOUNT_POINT%"
VERSION="%VERSION%"

FIRST_START_FILE=/tmp/.rescale_simmon_%VERSION%

# Make sure the jupyter4all infra is initialised. Timeout as it may happen when
# jupyter4all flag is not enabled. Run the jupyter replacement code only on the
# fist run.
if ! [ -f $FIRST_START_FILE ]; then
  JPID=$(ps -o pid --no-headers -C jupyter-notebook)
  JPPID=$(ps -o ppid --no-headers -C jupyter-notebook)
  count=1

  while [ -z "$JPID" ] && [ $count -le 30 ]; do
    echo "Waiting for Jupyter to start..."
    sleep 10
    JPID=$(ps -o pid --no-headers -C jupyter-notebook)
    JPPID=$(ps -o ppid --no-headers -C jupyter-notebook)
    count=$((count + 1))
  done

  # Check if jupyter4all is enabled
  if [ -z "$JPID" ]; then
    echo >&2 "ERROR: Rescale App failed to start. Check jupyter4all flag is enabled."
    exit 2
  fi

  # Add some time padding to make sure platform finishes all health checks before
  # killing the Jupyter server
  echo "Getting Simulation Monitor RescaleApp ready... It will become available in 30 seconds."
  sleep 30
  kill -9 $JPPID $JPID
  touch $FIRST_START_FILE
fi

INSTALL_DIR=$MOUNT_POINT/$VERSION

eval "$(/${INSTALL_DIR}/miniconda/bin/conda shell.bash hook)"
conda activate RESCALE

cd $INSTALL_DIR

# When the setup_command is run RESCALE_CLUSTER_ID is not set, even if this
# script is run with JOB_USER - HOME will be set to /root, envvars set by
# attached tiles like ANSYSCFX_VERSION are not there yet. However when Jupyter
# starts the platform populated .bash_profile of the job user with all we need.
export HOME=/enc/$JOB_USER
source $HOME/.bash_profile

# Start daemonized (in the background), so the main proces exits and the actual
# simulation can start
CERT=$HOME/.certs/nb.pem
CKEY=$HOME/.certs/nb.key

echo "Simulation Monitor RescaleApp ready. Open the Jupyter Notebook link to access it."

gunicorn --certfile $CERT --keyfile $CKEY -b 0.0.0.0:8888 app:server
